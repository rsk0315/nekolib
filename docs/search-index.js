var searchIndex = JSON.parse('{\
"algo":{"doc":"","t":"IQQKIQQK","n":["Bisect","Input","Output","bisect","Bisect","Input","Output","bisect"],"q":[[0,"algo"],[4,"algo::bisect"]],"d":["","","","","","","",""],"i":[0,2,2,2,0,2,2,2],"f":[0,0,0,[1],0,0,0,[1]],"c":[],"p":[[8,"Fn"],[8,"Bisect"]]},\
"assoc_list":{"doc":"","t":"DENDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AssocList","Entry","Occupied","OccupiedEntry","Vacant","VacantEntry","and_modify","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","entry","from","from","from","from","get","get_mut","insert","insert","insert","into","into","into","into","into_key","into_mut","is_empty","key","key","key","len","new","or_default","or_insert","or_insert_with","or_insert_with_key","remove","remove","remove_entry","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"assoc_list"]],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,2,0,2,0,2,4,2,7,5,4,2,7,5,4,4,4,2,7,5,5,5,4,7,5,4,2,7,5,7,5,4,2,7,5,4,4,2,2,2,2,4,5,5,4,2,7,5,4,2,7,5,4,2,7,5],"f":[0,0,0,0,0,0,[[[2,[1]],3],[[2,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[1]]]],[[[4,[1]],1],[[2,[1]]]],[[]],[[]],[[]],[[]],[[[5,[1]]]],[[[5,[1]]]],[[[4,[1]],1],6],[[[7,[1]]]],[[[5,[1]]]],[[]],[[]],[[]],[[]],[[[7,[1]]],1],[[[5,[1]]]],[[[4,[1]]],8],[[[2,[1]]],1],[[[7,[1]]],1],[[[5,[1]]],1],[[[4,[1]]],9],[[],[[4,[1]]]],[[[2,[1,10]]],10],[[[2,[1]]]],[[[2,[1]],3]],[[[2,[1]],3]],[[[4,[[12,[[11,[[12,[11]],1]]]],1]],[11,[[12,[[11,[[12,[11]],1]]]],1]]],6],[[[5,[1]]]],[[[5,[1]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14]],"c":[],"p":[[8,"Eq"],[4,"Entry"],[8,"FnOnce"],[3,"AssocList"],[3,"OccupiedEntry"],[4,"Option"],[3,"VacantEntry"],[15,"bool"],[15,"usize"],[8,"Default"],[8,"Borrow"],[8,"PartialEq"],[4,"Result"],[3,"TypeId"]]},\
"bin_iter":{"doc":"2 進法のイテレータ。","t":"IIQDKLLLLLLLKLLL","n":["BinIter","Binary","Iter","UIntIter","bin_iter","borrow","borrow_mut","from","into","into_iter","new","next","pop","try_from","try_into","type_id"],"q":[[0,"bin_iter"]],"d":["2 進法のイテレータ。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,7,0,7,2,2,2,2,2,2,2,1,2,2,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,[[2,[1]]]],[[[2,[1]]],3],[[],[[3,[4]]]],[[],5],[[],5],[[],6]],"c":[],"p":[[8,"Binary"],[3,"UIntIter"],[4,"Option"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"BinIter"]]},\
"bisect":{"doc":"","t":"IQQK","n":["Bisect","Input","Output","bisect"],"q":[[0,"bisect"]],"d":["","","",""],"i":[0,2,2,2],"f":[0,0,0,[1]],"c":[],"p":[[8,"Fn"],[8,"Bisect"]]},\
"disjoint_set":{"doc":"","t":"DLLLLLLLLLLLL","n":["DisjointSet","borrow","borrow_mut","count","equiv","from","into","new","repr","try_from","try_into","type_id","unite"],"q":[[0,"disjoint_set"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2],2],[[1,2,2],3],[[]],[[]],[2,1],[[1,2],2],[[],4],[[],4],[[],5],[[1,2,2],3]],"c":[],"p":[[3,"DisjointSet"],[15,"usize"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"ds":{"doc":"","t":"DDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDD","n":["FoldableQueue","PeekMutTmp","UnionFind","VecSegtree","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","deref","deref_mut","drop","equiv","fmt","fold","fold","fold_bisect_from","fold_bisect_to","from","from","from","from","from","from","from_iter","index","into","into","into","into","new","new","partition","partition_len","peek_mut","pop","push","repr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unite","FoldableQueue","UnionFind","PeekMutTmp","VecSegtree"],"q":[[0,"ds"],[55,"ds::foldable_queue"],[56,"ds::union_find"],[57,"ds::vec_segtree"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,11,7,4,1,11,7,4,1,4,4,4,1,7,11,7,11,11,1,11,11,11,7,4,11,11,1,11,7,4,1,7,1,1,11,7,7,1,1,11,7,4,1,11,7,4,1,11,7,4,1,0,0,0,0],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],2],[[[4,[3]]]],[[[4,[3]]]],[[[4,[3]]]],[[1,2,2],5],[[[7,[[0,[6,3]]]],8],[[10,[9]]]],[[[11,[3]],12]],[[[7,[3]],13]],[[[11,[3]],2,14]],[[[11,[3]],2,14]],[[]],[[[16,[15]]],[[11,[[0,[3,17]]]]]],[[],[[11,[3]]]],[[]],[[]],[[]],[18,[[11,[[0,[3,17]]]]]],[[[11,[3]],2]],[[]],[[]],[[]],[[]],[2,1],[[],[[7,[17,3]]]],[1,[[16,[[16,[2,15]],15]]]],[1,2],[[[11,[3]],2],[[4,[3]]]],[[[7,[3]]],19],[[[7,[3]]]],[[1,2],2],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],20],[[],20],[[],20],[[],20],[[1,2,2],5],0,0,0,0],"c":[],"p":[[3,"UnionFind"],[15,"usize"],[8,"Monoid"],[3,"PeekMutTmp"],[15,"bool"],[8,"Debug"],[3,"FoldableQueue"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"VecSegtree"],[8,"UsizeBounds"],[3,"RangeFull"],[8,"Fn"],[3,"Global"],[3,"Vec"],[8,"Default"],[8,"IntoIterator"],[4,"Option"],[3,"TypeId"]]},\
"fmt":{"doc":"","t":"DDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDD","n":["PerLine","PerLineUsize1","SpaceSep","SpaceSepUsize1","StrSep","StrSepUsize1","YesNo","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","PerLine","PerLineUsize1","SpaceSep","SpaceSepUsize1","StrSep","StrSepUsize1","YesNo"],"q":[[0,"fmt"],[106,"fmt::str_sep"],[112,"fmt::yes_no"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,7,8,9,10,11,12,3,7,8,9,10,11,12,3,3,3,3,3,3,3,3,3,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,3,7,8,9,10,11,12,3,7,8,9,10,11,12,3,7,8,9,10,11,12,3,7,8,9,10,11,12,3,7,8,9,10,11,12,3,7,8,9,10,11,12,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[[3,[[0,[1,2]]]],4],[[6,[5]]]],[[7,4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[8,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[9,[[0,[1,2]]]],4],[[6,[5]]]],[[[10,[[0,[1,2]]]],4],[[6,[5]]]],[[[10,[[0,[1,2]]]],4],[[6,[5]]]],[[[10,[[0,[1,2]]]],4],[[6,[5]]]],[[[10,[[0,[1,2]]]],4],[[6,[5]]]],[[[10,[[0,[1,2]]]],4],[[6,[5]]]],[[[11,[[0,[1,2]]]],4],[[6,[5]]]],[[[11,[[0,[1,2]]]],4],[[6,[5]]]],[[[11,[[0,[1,2]]]],4],[[6,[5]]]],[[[11,[[0,[1,2]]]],4],[[6,[5]]]],[[[11,[[0,[1,2]]]],4],[[6,[5]]]],[[[12,[[0,[1,2]]]],4],[[6,[5]]]],[[[12,[[0,[1,2]]]],4],[[6,[5]]]],[[[12,[[0,[1,2]]]],4],[[6,[5]]]],[[[12,[[0,[1,2]]]],4],[[6,[5]]]],[[[12,[[0,[1,2]]]],4],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0],"c":[],"p":[[8,"IntoIterator"],[8,"Clone"],[3,"SpaceSep"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"YesNo"],[3,"PerLine"],[3,"StrSep"],[3,"SpaceSepUsize1"],[3,"PerLineUsize1"],[3,"StrSepUsize1"],[3,"String"],[3,"TypeId"]]},\
"foldable_queue":{"doc":"","t":"DLLLLLLLLLLLL","n":["FoldableQueue","borrow","borrow_mut","fmt","fold","from","into","new","pop","push","try_from","try_into","type_id"],"q":[[0,"foldable_queue"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,[[]],[[]],[[[3,[[0,[1,2]]]],4],5],[[[3,[2]],6]],[[]],[[]],[[],[[3,[7,2]]]],[[[3,[2]]],8],[[[3,[2]]]],[[],9],[[],9],[[],10]],"c":[],"p":[[8,"Debug"],[8,"Monoid"],[3,"FoldableQueue"],[3,"Formatter"],[6,"Result"],[3,"RangeFull"],[8,"Default"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"inner":{"doc":"","t":"O","n":["doc_inline_reexport"],"q":[[0,"inner"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"input":{"doc":"","t":"GDQIHILLLLLLKLLKOOLLL","n":["AutoSource","OnceSource","Output","Readable","STDIN_SOURCE","Source","borrow","borrow_mut","from","from","into","new","next_token","next_token","next_token_unwrap","read","read_value","scan","try_from","try_into","type_id"],"q":[[0,"input"]],"d":["","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,12,0,0,0,5,5,5,5,5,5,9,5,9,12,0,0,5,5,5],"f":[0,0,0,0,0,0,[[]],[[]],[1,[[5,[[4,[[3,[2]]]]]]]],[[]],[[]],[6,[[5,[6]]]],[[],[[8,[7]]]],[[[5,[6]]],[[8,[7]]]],[[],7],[[[9,[6]]]],0,0,[[],10],[[],10],[[],11]],"c":[],"p":[[15,"str"],[15,"u8"],[15,"slice"],[3,"BufReader"],[3,"OnceSource"],[8,"BufRead"],[3,"String"],[4,"Option"],[8,"Source"],[4,"Result"],[3,"TypeId"],[8,"Readable"]]},\
"integer":{"doc":"","t":"IIQSSSSSSIDDDDDDIDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLIIQDKKIDDDDDDIKK","n":["BinIter","Binary","Iter","LG_W","LG_W","LG_W","LG_W","LG_W","LG_W","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PdepPextMaskUsize","Pext","UIntIter","bin_iter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","from","from","get","get","get","get","get","get","into","into","into","into","into","into","into","into_iter","new","new","new","new","new","new","new","next","pdep","pext","pop","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BinIter","Binary","Iter","UIntIter","bin_iter","pop","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PdepPextMaskUsize","Pext","pdep","pext"],"q":[[0,"integer"],[104,"integer::bin_iter"],[110,"integer::pdep_pext"]],"d":["2 進法のイテレータ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2 進法のイテレータ。","","","","","","","","","","","","","","",""],"i":[0,0,19,1,2,3,4,5,6,0,0,0,0,0,0,0,0,0,19,14,1,2,3,4,5,6,14,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,14,1,2,3,4,5,6,1,2,3,4,5,6,14,1,2,3,4,5,6,14,14,1,2,3,4,5,6,14,20,21,13,1,2,3,4,5,6,14,1,2,3,4,5,6,14,1,2,3,4,5,6,14,1,2,3,4,5,6,0,0,19,0,19,13,0,0,0,0,0,0,0,0,20,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,7],[2,8],[3,9],[4,10],[5,11],[6,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,[[14,[13]]]],[7,1],[8,2],[9,3],[10,4],[11,5],[12,6],[[[14,[13]]],15],[[]],[[]],[[],[[15,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,[[]],[[],[[15,[16]]]],0,0,0,0,0,0,0,0,[[]],[[]]],"c":[],"p":[[3,"PdepPextMaskU8"],[3,"PdepPextMaskU16"],[3,"PdepPextMaskU32"],[3,"PdepPextMaskU64"],[3,"PdepPextMaskU128"],[3,"PdepPextMaskUsize"],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u128"],[15,"usize"],[8,"Binary"],[3,"UIntIter"],[4,"Option"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"BinIter"],[8,"Pdep"],[8,"Pext"]]},\
"inversion":{"doc":"","t":"IK","n":["Inversion","inversion"],"q":[[0,"inversion"]],"d":["",""],"i":[0,5],"f":[0,[[],[[0,[[1,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]]]]]]],"c":[],"p":[[8,"Add"],[8,"AddAssign"],[8,"Sum"],[8,"Product"],[8,"Inversion"]]},\
"io":{"doc":"","t":"GEEEDQIHIELLLLLLLLLLLLLLLLLLLLLLKLLKLLLLOOLLLLLLLLLLLLLLLGDQIHIKLKOOEEEE","n":["AutoSource","Bytes","Chars","Isize1","OnceSource","Output","Readable","STDIN_SOURCE","Source","Usize1","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","into","into","into","into","into","new","next_token","next_token","next_token_unwrap","read","read","read","read","read","read_value","scan","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AutoSource","OnceSource","Output","Readable","STDIN_SOURCE","Source","next_token","next_token_unwrap","read","read_value","scan","Bytes","Chars","Isize1","Usize1"],"q":[[0,"io"],[57,"io::input"],[68,"io::readable"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,17,0,0,0,0,18,19,20,21,5,18,19,20,21,5,18,19,20,21,5,5,18,19,20,21,5,5,9,5,9,17,18,19,20,21,0,0,18,19,20,21,5,18,19,20,21,5,18,19,20,21,5,0,0,17,0,0,0,9,9,17,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[5,[[4,[[3,[2]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[5,[6]]]],[[],[[8,[7]]]],[[[5,[6]]],[[8,[7]]]],[[],7],[[[9,[6]]]],[[[9,[6]]],10],[[[9,[6]]],11],[[[9,[6]]],[[14,[12,13]]]],[[[9,[6]]],[[14,[2,13]]]],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,[[],[[8,[7]]]],[[],7],[[[9,[6]]]],0,0,0,0,0,0],"c":[],"p":[[15,"str"],[15,"u8"],[15,"slice"],[3,"BufReader"],[3,"OnceSource"],[8,"BufRead"],[3,"String"],[4,"Option"],[8,"Source"],[15,"usize"],[15,"isize"],[15,"char"],[3,"Global"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[8,"Readable"],[4,"Usize1"],[4,"Isize1"],[4,"Chars"],[4,"Bytes"]]},\
"katex_support":{"doc":"$<code>\\\\KaTeX</code>$ support","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"lis":{"doc":"","t":"QDDIIQDDLLLLLLLLLLLLLLLLKLKLLLLKLLLLLLLLLLLLLLLL","n":["Item","Largest","Leftmost","Lis","LisMapProj","Mapped","Rightmost","Smallest","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","lis","lis_len","map","map","map","map","map","proj","proj","proj","proj","proj","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"lis"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[14,0,0,0,0,2,0,0,5,8,9,11,5,8,9,11,5,8,9,11,5,8,9,11,14,14,2,5,8,9,11,2,5,8,9,11,5,8,9,11,5,8,9,11,5,8,9,11],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],3],[1,4],[4],[[5,4,[0,[6,7]]]],[[8,4,[0,[6,7]]]],[[9,4,[0,[6,7]]],[[10,[4]]]],[[11,4,[0,[6,7]]],4],[[],4],[5,4],[8,4],[[9,[10,[4]]],4],[[11,4],4],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13]],"c":[],"p":[[15,"bool"],[8,"LisMapProj"],[3,"Vec"],[15,"usize"],[3,"Smallest"],[8,"Ord"],[8,"Clone"],[3,"Largest"],[3,"Leftmost"],[3,"Reverse"],[3,"Rightmost"],[4,"Result"],[3,"TypeId"],[8,"Lis"]]},\
"macros":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"math":{"doc":"","t":"GGIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLGGIDK","n":["ModInt1000000007","ModInt998244353","RemEuclidU32","StaticModInt","add","add","add","add","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","div","div","div","div","div_assign","div_assign","eq","equivalent","fmt","fmt","from","from","hash","into","modulus","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","new","product","product","rem_euclid_u32","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_string","try_from","try_into","type_id","ModInt1000000007","ModInt998244353","RemEuclidU32","StaticModInt","rem_euclid_u32"],"q":[[0,"math"],[54,"math::modint"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,6],"f":[0,0,0,0,[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[]],[[]],[1,1],[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1],2],[[],2],[[1,3],[[5,[4]]]],[[1,3],[[5,[4]]]],[[]],[6,1],[[1,7]],[[]],[[],8],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[1],[1],[6,1],[9,1],[9,1],[8,8],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[9,1],[9,1],[[]],[[],10],[[],5],[[],5],[[],11],0,0,0,0,[8,8]],"c":[],"p":[[3,"StaticModInt"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[8,"RemEuclidU32"],[8,"Hasher"],[15,"u32"],[8,"Iterator"],[3,"String"],[3,"TypeId"]]},\
"modint":{"doc":"","t":"GGIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLL","n":["ModInt1000000007","ModInt998244353","RemEuclidU32","StaticModInt","add","add","add","add","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","div","div","div","div","div_assign","div_assign","eq","equivalent","fmt","fmt","from","from","hash","into","modulus","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","new","product","product","rem_euclid_u32","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"modint"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[]],[[]],[1,1],[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1],2],[[],2],[[1,3],4],[[1,3],4],[[]],[5,1],[[1,6]],[[]],[[],7],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[1],[1],[5,1],[8,1],[8,1],[7,7],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[8,1],[8,1],[[]],[[],9],[[],10],[[],10],[[],11]],"c":[],"p":[[3,"StaticModInt"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"RemEuclidU32"],[8,"Hasher"],[15,"u32"],[8,"Iterator"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"monoid":{"doc":"","t":"IIIIIIIIIIIQKKK","n":["Associative","BinaryOp","Commutative","CommutativeGroup","CommutativeMonoid","Group","Identity","Magma","Monoid","Recip","Semigroup","Set","id","op","recip"],"q":[[0,"monoid"]],"d":["","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,2,1,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]]],"c":[],"p":[[8,"BinaryOp"],[8,"Identity"],[8,"Recip"]]},\
"naive":{"doc":"","t":"DDENDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENDNDD","n":["AssocList","DisjointSet","Entry","Occupied","OccupiedEntry","Vacant","VacantEntry","and_modify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","default","entry","equiv","from","from","from","from","from","get","get_mut","insert","insert","insert","into","into","into","into","into","into_key","into_mut","is_empty","key","key","key","len","new","new","or_default","or_insert","or_insert_with","or_insert_with_key","remove","remove","remove_entry","repr","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unite","AssocList","Entry","Occupied","OccupiedEntry","Vacant","VacantEntry","DisjointSet"],"q":[[0,"naive"],[70,"naive::assoc_list"],[76,"naive::disjoint_set"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,2,0,2,0,2,4,6,2,10,8,4,6,2,10,8,4,6,6,4,4,6,2,10,8,8,8,6,10,8,4,6,2,10,8,10,8,6,2,10,8,6,4,6,2,2,2,2,6,8,8,4,4,6,2,10,8,4,6,2,10,8,4,6,2,10,8,4,0,0,2,0,2,0,0],"f":[0,0,0,0,0,0,0,[[[2,[1]],3],[[2,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,5],5],[[],[[6,[1]]]],[[[6,[1]],1],[[2,[1]]]],[[4,5,5],7],[[]],[[]],[[]],[[]],[[]],[[[8,[1]]]],[[[8,[1]]]],[[[6,[1]],1],9],[[[10,[1]]]],[[[8,[1]]]],[[]],[[]],[[]],[[]],[[]],[[[10,[1]]],1],[[[8,[1]]]],[[[6,[1]]],7],[[[2,[1]]],1],[[[10,[1]]],1],[[[8,[1]]],1],[[[6,[1]]],5],[5,4],[[],[[6,[1]]]],[[[2,[1,11]]],11],[[[2,[1]]]],[[[2,[1]],3]],[[[2,[1]],3]],[[[6,[[13,[[12,[[13,[12]],1]]]],1]],[12,[[13,[[12,[[13,[12]],1]]]],1]]],9],[[[8,[1]]]],[[[8,[1]]]],[[4,5],5],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[4,5,5],7],0,0,0,0,0,0,0],"c":[],"p":[[8,"Eq"],[4,"Entry"],[8,"FnOnce"],[3,"DisjointSet"],[15,"usize"],[3,"AssocList"],[15,"bool"],[3,"OccupiedEntry"],[4,"Option"],[3,"VacantEntry"],[8,"Default"],[8,"Borrow"],[8,"PartialEq"],[4,"Result"],[3,"TypeId"]]},\
"nekolib_doc":{"doc":"","t":"IQQKIQQKDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDIIQSSSSSSIDDDDDDIDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLIIQDKKIDDDDDDIKKGEEEDQIHIELLLLLLLLLLLLLLLLLLLLLLKLLKLLLLOOLLLLLLLLLLLLLLLGDQIHIKLKOOEEEEGGIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLGGIDKDDENDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENDNDDIIIIINIINIIDIIQNIELLLLKLLLLLKLLLKLKLLKLLLLLLLIIIIIIIIIIIQKKKDNNNIEKKIQDDIIQDDLLLLLLLLLLLLLLLLKKLKLLLLKLLLLLLLLLLLLLLLLIKQDDIIQDDKLKKIKIK","n":["Bisect","Input","Output","bisect","Bisect","Input","Output","bisect","FoldableQueue","PeekMutTmp","UnionFind","VecSegtree","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","deref","deref_mut","drop","equiv","fmt","fold","fold","fold_bisect_from","fold_bisect_to","from","from","from","from","from","from","from_iter","index","into","into","into","into","new","new","partition","partition_len","peek_mut","pop","push","repr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unite","FoldableQueue","UnionFind","PeekMutTmp","VecSegtree","PerLine","PerLineUsize1","SpaceSep","SpaceSepUsize1","StrSep","StrSepUsize1","YesNo","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","PerLine","PerLineUsize1","SpaceSep","SpaceSepUsize1","StrSep","StrSepUsize1","YesNo","BinIter","Binary","Iter","LG_W","LG_W","LG_W","LG_W","LG_W","LG_W","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PdepPextMaskUsize","Pext","UIntIter","bin_iter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","from","from","get","get","get","get","get","get","into","into","into","into","into","into","into","into_iter","new","new","new","new","new","new","new","next","pdep","pext","pop","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BinIter","Binary","Iter","UIntIter","bin_iter","pop","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PdepPextMaskUsize","Pext","pdep","pext","AutoSource","Bytes","Chars","Isize1","OnceSource","Output","Readable","STDIN_SOURCE","Source","Usize1","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","into","into","into","into","into","new","next_token","next_token","next_token_unwrap","read","read","read","read","read","read_value","scan","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AutoSource","OnceSource","Output","Readable","STDIN_SOURCE","Source","next_token","next_token_unwrap","read","read_value","scan","Bytes","Chars","Isize1","Usize1","ModInt1000000007","ModInt998244353","RemEuclidU32","StaticModInt","add","add","add","add","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","div","div","div","div","div_assign","div_assign","eq","equivalent","fmt","fmt","from","from","hash","into","modulus","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","new","product","product","rem_euclid_u32","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_string","try_from","try_into","type_id","ModInt1000000007","ModInt998244353","RemEuclidU32","StaticModInt","rem_euclid_u32","AssocList","DisjointSet","Entry","Occupied","OccupiedEntry","Vacant","VacantEntry","and_modify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","default","entry","equiv","from","from","from","from","from","get","get_mut","insert","insert","insert","into","into","into","into","into","into_key","into_mut","is_empty","key","key","key","len","new","new","or_default","or_insert","or_insert_with","or_insert_with_key","remove","remove","remove_entry","repr","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unite","AssocList","Entry","Occupied","OccupiedEntry","Vacant","VacantEntry","DisjointSet","Associative","BinaryOp","Commutative","CommutativeGroup","CommutativeMonoid","EndIndexLen","Group","Identity","IndexOrder","Magma","Monoid","OpAdd","Recip","Semigroup","Set","StartIndexLen","UsizeBounds","UsizeOob","borrow","borrow","borrow_mut","borrow_mut","checked_to_range","default","fmt","fmt","from","from","id","id","into","into","op","op","recip","recip","resolve_bounds","to_range","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Associative","BinaryOp","Commutative","CommutativeGroup","CommutativeMonoid","Group","Identity","Magma","Monoid","Recip","Semigroup","Set","id","op","recip","OpAdd","EndIndexLen","IndexOrder","StartIndexLen","UsizeBounds","UsizeOob","checked_to_range","to_range","Inversion","Item","Largest","Leftmost","Lis","LisMapProj","Mapped","Rightmost","Smallest","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","inversion","lis","lis_len","map","map","map","map","map","proj","proj","proj","proj","proj","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Inversion","inversion","Item","Largest","Leftmost","Lis","LisMapProj","Mapped","Rightmost","Smallest","lis","lis_len","map","proj","Permutation","inv","Permutation","inv"],"q":[[0,"nekolib_doc::algo"],[4,"nekolib_doc::algo::bisect"],[8,"nekolib_doc::ds"],[63,"nekolib_doc::ds::foldable_queue"],[64,"nekolib_doc::ds::union_find"],[65,"nekolib_doc::ds::vec_segtree"],[67,"nekolib_doc::fmt"],[173,"nekolib_doc::fmt::str_sep"],[179,"nekolib_doc::fmt::yes_no"],[180,"nekolib_doc::integer"],[284,"nekolib_doc::integer::bin_iter"],[290,"nekolib_doc::integer::pdep_pext"],[300,"nekolib_doc::io"],[357,"nekolib_doc::io::input"],[368,"nekolib_doc::io::readable"],[372,"nekolib_doc::math"],[426,"nekolib_doc::math::modint"],[431,"nekolib_doc::naive"],[501,"nekolib_doc::naive::assoc_list"],[507,"nekolib_doc::naive::disjoint_set"],[508,"nekolib_doc::ops"],[553,"nekolib_doc::ops::monoid"],[568,"nekolib_doc::ops::op_add"],[569,"nekolib_doc::ops::usize_bounds"],[576,"nekolib_doc::seq"],[626,"nekolib_doc::seq::inversion"],[628,"nekolib_doc::seq::lis"],[640,"nekolib_doc::uslice"],[642,"nekolib_doc::uslice::permutation"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2 進法のイテレータ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2 進法のイテレータ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,78,78,78,0,78,78,78,0,0,0,0,2,12,8,5,2,12,8,5,2,5,5,5,2,8,12,8,12,12,2,12,12,12,8,5,12,12,2,12,8,5,2,8,2,2,12,8,8,2,2,12,8,5,2,12,8,5,2,12,8,5,2,0,0,0,0,0,0,0,0,0,0,0,22,23,24,25,26,27,28,22,23,24,25,26,27,28,22,22,22,22,22,22,22,22,22,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,27,27,27,27,27,28,28,28,28,28,22,23,24,25,26,27,28,22,23,24,25,26,27,28,22,23,24,25,26,27,28,22,23,24,25,26,27,28,22,23,24,25,26,27,28,22,23,24,25,26,27,28,0,0,0,0,0,0,0,0,0,79,30,31,32,33,34,35,0,0,0,0,0,0,0,0,0,79,42,30,31,32,33,34,35,42,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,42,30,31,32,33,34,35,30,31,32,33,34,35,42,30,31,32,33,34,35,42,42,30,31,32,33,34,35,42,80,81,41,30,31,32,33,34,35,42,30,31,32,33,34,35,42,30,31,32,33,34,35,42,30,31,32,33,34,35,0,0,79,0,79,41,0,0,0,0,0,0,0,0,80,81,0,0,0,0,0,82,0,0,0,0,83,84,85,86,46,83,84,85,86,46,83,84,85,86,46,46,83,84,85,86,46,46,48,46,48,82,83,84,85,86,0,0,83,84,85,86,46,83,84,85,86,46,83,84,85,86,46,0,0,82,0,0,0,48,48,82,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,52,0,0,0,56,0,56,0,56,58,59,56,61,60,58,59,56,61,60,58,59,59,58,58,59,56,61,60,60,60,59,61,60,58,59,56,61,60,61,60,59,56,61,60,59,58,59,56,56,56,56,59,60,60,58,58,59,56,61,60,58,59,56,61,60,58,59,56,61,60,58,0,0,56,0,56,0,0,0,0,0,0,0,65,0,0,65,0,0,0,0,0,87,65,0,0,65,66,65,66,13,66,65,66,65,66,88,66,65,66,87,66,89,66,65,13,65,65,66,65,66,65,66,0,0,0,0,0,0,0,0,0,0,0,87,88,87,89,0,65,65,65,0,0,13,13,0,90,0,0,0,0,71,0,0,72,74,75,77,72,74,75,77,72,74,75,77,72,74,75,77,91,90,90,71,72,74,75,77,71,72,74,75,77,72,74,75,77,72,74,75,77,72,74,75,77,0,91,90,0,0,0,0,71,0,0,90,90,71,71,0,92,0,92],"f":[0,0,0,[1],0,0,0,[1],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,3],3],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[2,3,3],6],[[[8,[[0,[7,4]]]],9],[[11,[10]]]],[[[12,[4]],13]],[[[8,[4]],14]],[[[12,[4]],3,1]],[[[12,[4]],3,1]],[[]],[[[16,[15]]],[[12,[[0,[4,17]]]]]],[[],[[12,[4]]]],[[]],[[]],[[]],[18,[[12,[[0,[4,17]]]]]],[[[12,[4]],3]],[[]],[[]],[[]],[[]],[3,2],[[],[[8,[17,4]]]],[2,[[16,[[16,[3,15]],15]]]],[2,3],[[[12,[4]],3],[[5,[4]]]],[[[8,[4]]],19],[[[8,[4]]]],[[2,3],3],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],[[],20],[[],20],[[2,3,3],6],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[[22,[[0,[18,21]]]],9],[[11,[10]]]],[[23,9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[24,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[25,[[0,[18,21]]]],9],[[11,[10]]]],[[[26,[[0,[18,21]]]],9],[[11,[10]]]],[[[26,[[0,[18,21]]]],9],[[11,[10]]]],[[[26,[[0,[18,21]]]],9],[[11,[10]]]],[[[26,[[0,[18,21]]]],9],[[11,[10]]]],[[[26,[[0,[18,21]]]],9],[[11,[10]]]],[[[27,[[0,[18,21]]]],9],[[11,[10]]]],[[[27,[[0,[18,21]]]],9],[[11,[10]]]],[[[27,[[0,[18,21]]]],9],[[11,[10]]]],[[[27,[[0,[18,21]]]],9],[[11,[10]]]],[[[27,[[0,[18,21]]]],9],[[11,[10]]]],[[[28,[[0,[18,21]]]],9],[[11,[10]]]],[[[28,[[0,[18,21]]]],9],[[11,[10]]]],[[[28,[[0,[18,21]]]],9],[[11,[10]]]],[[[28,[[0,[18,21]]]],9],[[11,[10]]]],[[[28,[[0,[18,21]]]],9],[[11,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,36],[31,37],[32,38],[33,39],[34,40],[35,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,[[42,[41]]]],[36,30],[37,31],[38,32],[39,33],[40,34],[3,35],[[[42,[41]]],19],[[]],[[]],[[],[[19,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,[[]],[[],[[19,[6]]]],0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,[[46,[[45,[[44,[36]]]]]]]],[[]],[[]],[[]],[[]],[[]],[47,[[46,[47]]]],[[],[[19,[29]]]],[[[46,[47]]],[[19,[29]]]],[[],29],[[[48,[47]]]],[[[48,[47]]],3],[[[48,[47]]],49],[[[48,[47]]],[[16,[50,15]]]],[[[48,[47]]],[[16,[36,15]]]],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,[[],[[19,[29]]]],[[],29],[[[48,[47]]]],0,0,0,0,0,0,0,0,0,0,[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[]],[[]],[51,51],[[]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51],6],[[],6],[[51,9],[[11,[10]]]],[[51,9],[[11,[10]]]],[[]],[52,51],[[51,53]],[[]],[[],38],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[51],[51],[52,51],[54,51],[54,51],[38,38],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[54,51],[54,51],[[]],[[],29],[[],11],[[],11],[[],20],0,0,0,0,[38,38],0,0,0,0,0,0,0,[[[56,[55]],57],[[56,[55]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[58,3],3],[[],[[59,[55]]]],[[[59,[55]],55],[[56,[55]]]],[[58,3,3],6],[[]],[[]],[[]],[[]],[[]],[[[60,[55]]]],[[[60,[55]]]],[[[59,[55]],55],19],[[[61,[55]]]],[[[60,[55]]]],[[]],[[]],[[]],[[]],[[]],[[[61,[55]]],55],[[[60,[55]]]],[[[59,[55]]],6],[[[56,[55]]],55],[[[61,[55]]],55],[[[60,[55]]],55],[[[59,[55]]],3],[3,58],[[],[[59,[55]]]],[[[56,[55,17]]],17],[[[56,[55]]]],[[[56,[55]],57]],[[[56,[55]],57]],[[[59,[[63,[[62,[[63,[62]],55]]]],55]],[62,[[63,[[62,[[63,[62]],55]]]],55]]],19],[[[60,[55]]]],[[[60,[55]]]],[[58,3],3],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],[[],20],[[],20],[[],20],[[58,3,3],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[3,[[11,[[64,[3]],65]]]],[[],66],[[65,9],[[11,[10]]]],[[[66,[7]],9],[[11,[10]]]],[[]],[[]],[[]],[[[66,[[67,[[67,[[67,[67]]]]]]]]],[[67,[[67,[[67,[[67,[67]]]]]]]]]],[[]],[[]],[[]],[66],[[]],[[[66,[[67,[[67,[[67,[67]]]]]]]],[67,[[67,[[67,[[67,[67]]]]]]]]],[[67,[[67,[[67,[[67,[67]]]]]]]]]],[65,[[64,[3]]]],[3,[[64,[3]]]],[65,29],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,[3,[[11,[[64,[3]],65]]]],[3,[[64,[3]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[0,[[68,[[0,[[68,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]]]]]]]]]],[[6,71],[[16,[15]]]],[6,3],[3],[[72,3,[0,[73,21]]]],[[74,3,[0,[73,21]]]],[[75,3,[0,[73,21]]],[[76,[3]]]],[[77,3,[0,[73,21]]],3],[[],3],[72,3],[74,3],[[75,[76,[3]]],3],[[77,3],3],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],[[],20],[[],20],0,[[],[[0,[[68,[[0,[[68,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[69,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[67,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]],[70,[[0,[[68,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[69,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[67,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]],[70,[[0,[[68,[[0,[68,69,67,70]]]],[69,[[0,[68,69,67,70]]]],[67,[[0,[68,69,67,70]]]],[70,[[0,[68,69,67,70]]]]]]]]]]]]]]]]]]]],0,0,0,0,0,0,0,0,[[6,71],[[16,[15]]]],[6,3],[3],[[],3],0,[[],[[16,[3,15]]]],0,[[],[[16,[3,15]]]]],"c":[],"p":[[8,"Fn"],[3,"UnionFind"],[15,"usize"],[8,"Monoid"],[3,"PeekMutTmp"],[15,"bool"],[8,"Debug"],[3,"FoldableQueue"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"VecSegtree"],[8,"UsizeBounds"],[3,"RangeFull"],[3,"Global"],[3,"Vec"],[8,"Default"],[8,"IntoIterator"],[4,"Option"],[3,"TypeId"],[8,"Clone"],[3,"SpaceSep"],[3,"YesNo"],[3,"PerLine"],[3,"StrSep"],[3,"SpaceSepUsize1"],[3,"PerLineUsize1"],[3,"StrSepUsize1"],[3,"String"],[3,"PdepPextMaskU8"],[3,"PdepPextMaskU16"],[3,"PdepPextMaskU32"],[3,"PdepPextMaskU64"],[3,"PdepPextMaskU128"],[3,"PdepPextMaskUsize"],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u128"],[8,"Binary"],[3,"UIntIter"],[15,"str"],[15,"slice"],[3,"BufReader"],[3,"OnceSource"],[8,"BufRead"],[8,"Source"],[15,"isize"],[15,"char"],[3,"StaticModInt"],[8,"RemEuclidU32"],[8,"Hasher"],[8,"Iterator"],[8,"Eq"],[4,"Entry"],[8,"FnOnce"],[3,"DisjointSet"],[3,"AssocList"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Borrow"],[8,"PartialEq"],[3,"Range"],[4,"UsizeOob"],[3,"OpAdd"],[8,"Sum"],[8,"Add"],[8,"AddAssign"],[8,"Product"],[8,"LisMapProj"],[3,"Smallest"],[8,"Ord"],[3,"Largest"],[3,"Leftmost"],[3,"Reverse"],[3,"Rightmost"],[8,"Bisect"],[8,"BinIter"],[8,"Pdep"],[8,"Pext"],[8,"Readable"],[4,"Usize1"],[4,"Isize1"],[4,"Chars"],[4,"Bytes"],[8,"BinaryOp"],[8,"Identity"],[8,"Recip"],[8,"Lis"],[8,"Inversion"],[8,"Permutation"]]},\
"op_add":{"doc":"","t":"DLLLLLLLLLLLL","n":["OpAdd","borrow","borrow_mut","default","fmt","from","id","into","op","recip","try_from","try_into","type_id"],"q":[[0,"op_add"]],"d":["","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[],1],[[[1,[2]],3],4],[[]],[[[1,[[5,[[5,[[5,[5]]]]]]]]],[[5,[[5,[[5,[[5,[5]]]]]]]]]],[[]],[1],[[[1,[[5,[[5,[[5,[5]]]]]]]],[5,[[5,[[5,[[5,[5]]]]]]]]],[[5,[[5,[[5,[[5,[5]]]]]]]]]],[[],6],[[],6],[[],7]],"c":[],"p":[[3,"OpAdd"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Sum"],[4,"Result"],[3,"TypeId"]]},\
"ops":{"doc":"","t":"IIIIINIINIIDIIQNIELLLLKLLLLLKLLLKLKLLKLLLLLLLIIIIIIIIIIIQKKKDNNNIEKK","n":["Associative","BinaryOp","Commutative","CommutativeGroup","CommutativeMonoid","EndIndexLen","Group","Identity","IndexOrder","Magma","Monoid","OpAdd","Recip","Semigroup","Set","StartIndexLen","UsizeBounds","UsizeOob","borrow","borrow","borrow_mut","borrow_mut","checked_to_range","default","fmt","fmt","from","from","id","id","into","into","op","op","recip","recip","resolve_bounds","to_range","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Associative","BinaryOp","Commutative","CommutativeGroup","CommutativeMonoid","Group","Identity","Magma","Monoid","Recip","Semigroup","Set","id","op","recip","OpAdd","EndIndexLen","IndexOrder","StartIndexLen","UsizeBounds","UsizeOob","checked_to_range","to_range"],"q":[[0,"ops"],[45,"ops::monoid"],[60,"ops::op_add"],[61,"ops::usize_bounds"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,0,0,3,0,0,0,0,0,12,3,0,0,3,5,3,5,13,5,3,5,3,5,14,5,3,5,12,5,15,5,3,13,3,3,5,3,5,3,5,0,0,0,0,0,0,0,0,0,0,0,12,14,12,15,0,3,3,3,0,0,13,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,[[4,[[2,[1]],3]]]],[[],5],[[3,6],[[4,[7]]]],[[[5,[8]],6],[[4,[7]]]],[[]],[[]],[[]],[[[5,[[9,[[9,[[9,[9]]]]]]]]],[[9,[[9,[[9,[[9,[9]]]]]]]]]],[[]],[[]],[[]],[5],[[]],[[[5,[[9,[[9,[[9,[9]]]]]]]],[9,[[9,[[9,[[9,[9]]]]]]]]],[[9,[[9,[[9,[[9,[9]]]]]]]]]],[3,[[2,[1]]]],[1,[[2,[1]]]],[3,10],[[],4],[[],4],[[],4],[[],4],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,[1,[[4,[[2,[1]],3]]]],[1,[[2,[1]]]]],"c":[],"p":[[15,"usize"],[3,"Range"],[4,"UsizeOob"],[4,"Result"],[3,"OpAdd"],[3,"Formatter"],[3,"Error"],[8,"Debug"],[8,"Sum"],[3,"String"],[3,"TypeId"],[8,"BinaryOp"],[8,"UsizeBounds"],[8,"Identity"],[8,"Recip"]]},\
"pdep_pext":{"doc":"","t":"SSSSSSIDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLL","n":["LG_W","LG_W","LG_W","LG_W","LG_W","LG_W","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PdepPextMaskUsize","Pext","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","from","get","get","get","get","get","get","into","into","into","into","into","into","new","new","new","new","new","new","pdep","pext","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"pdep_pext"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,3,4,5,6,0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,15,16,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,7],[2,8],[3,9],[4,10],[5,11],[6,12],[[]],[[]],[[]],[[]],[[]],[[]],[7,1],[8,2],[9,3],[10,4],[11,5],[12,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14]],"c":[],"p":[[3,"PdepPextMaskU8"],[3,"PdepPextMaskU16"],[3,"PdepPextMaskU32"],[3,"PdepPextMaskU64"],[3,"PdepPextMaskU128"],[3,"PdepPextMaskUsize"],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u128"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"Pdep"],[8,"Pext"]]},\
"permutation":{"doc":"","t":"IK","n":["Permutation","inv"],"q":[[0,"permutation"]],"d":["",""],"i":[0,3],"f":[0,[[],[[2,[1]]]]],"c":[],"p":[[15,"usize"],[3,"Vec"],[8,"Permutation"]]},\
"poc":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"readable":{"doc":"","t":"EEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bytes","Chars","Isize1","Usize1","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","read","read","read","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"readable"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[[2,[1]]],4],[[[2,[1]]],[[6,[5]]]],[[[2,[1]]],[[6,[7]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9]],"c":[],"p":[[8,"BufRead"],[8,"Source"],[15,"usize"],[15,"isize"],[15,"char"],[3,"Vec"],[15,"u8"],[4,"Result"],[3,"TypeId"],[4,"Usize1"],[4,"Isize1"],[4,"Chars"],[4,"Bytes"]]},\
"seq":{"doc":"","t":"IQDDIIQDDLLLLLLLLLLLLLLLLKKLKLLLLKLLLLLLLLLLLLLLLLIKQDDIIQDDKLKK","n":["Inversion","Item","Largest","Leftmost","Lis","LisMapProj","Mapped","Rightmost","Smallest","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","inversion","lis","lis_len","map","map","map","map","map","proj","proj","proj","proj","proj","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Inversion","inversion","Item","Largest","Leftmost","Lis","LisMapProj","Mapped","Rightmost","Smallest","lis","lis_len","map","proj"],"q":[[0,"seq"],[50,"seq::inversion"],[52,"seq::lis"]],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,19,0,0,0,0,6,0,0,10,13,14,16,10,13,14,16,10,13,14,16,10,13,14,16,20,19,19,6,10,13,14,16,6,10,13,14,16,10,13,14,16,10,13,14,16,10,13,14,16,0,20,19,0,0,0,0,6,0,0,19,19,6,6],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[0,[[1,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]]]]]],[[5,6],[[8,[7]]]],[5,9],[9],[[10,9,[0,[11,12]]]],[[13,9,[0,[11,12]]]],[[14,9,[0,[11,12]]],[[15,[9]]]],[[16,9,[0,[11,12]]],9],[[],9],[10,9],[13,9],[[14,[15,[9]]],9],[[16,9],9],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],0,[[],[[0,[[1,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[2,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[3,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]],[4,[[0,[[1,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[2,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[3,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]],[4,[[0,[[1,[[0,[1,2,3,4]]]],[2,[[0,[1,2,3,4]]]],[3,[[0,[1,2,3,4]]]],[4,[[0,[1,2,3,4]]]]]]]]]]]]]]]]]]]],0,0,0,0,0,0,0,0,[[5,6],[[8,[7]]]],[5,9],[9],[[],9]],"c":[],"p":[[8,"Add"],[8,"AddAssign"],[8,"Sum"],[8,"Product"],[15,"bool"],[8,"LisMapProj"],[3,"Global"],[3,"Vec"],[15,"usize"],[3,"Smallest"],[8,"Ord"],[8,"Clone"],[3,"Largest"],[3,"Leftmost"],[3,"Reverse"],[3,"Rightmost"],[4,"Result"],[3,"TypeId"],[8,"Lis"],[8,"Inversion"]]},\
"str_sep":{"doc":"","t":"DDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["PerLine","PerLineUsize1","SpaceSep","SpaceSepUsize1","StrSep","StrSepUsize1","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"str_sep"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,6,7,8,9,10,3,6,7,8,9,10,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,3,6,7,8,9,10,3,6,7,8,9,10,3,6,7,8,9,10,3,6,7,8,9,10,3,6,7,8,9,10,3,6,7,8,9,10],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]],4],5],[[[3,[[0,[1,2]]]],4],5],[[[3,[[0,[1,2]]]],4],5],[[[3,[[0,[1,2]]]],4],5],[[[3,[[0,[1,2]]]],4],5],[[[3,[[0,[1,2]]]],4],5],[[[3,[[0,[1,2]]]],4],5],[[[3,[[0,[1,2]]]],4],5],[[[3,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[6,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[7,[[0,[1,2]]]],4],5],[[[8,[[0,[1,2]]]],4],5],[[[8,[[0,[1,2]]]],4],5],[[[8,[[0,[1,2]]]],4],5],[[[8,[[0,[1,2]]]],4],5],[[[8,[[0,[1,2]]]],4],5],[[[9,[[0,[1,2]]]],4],5],[[[9,[[0,[1,2]]]],4],5],[[[9,[[0,[1,2]]]],4],5],[[[9,[[0,[1,2]]]],4],5],[[[9,[[0,[1,2]]]],4],5],[[[10,[[0,[1,2]]]],4],5],[[[10,[[0,[1,2]]]],4],5],[[[10,[[0,[1,2]]]],4],5],[[[10,[[0,[1,2]]]],4],5],[[[10,[[0,[1,2]]]],4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13]],"c":[],"p":[[8,"IntoIterator"],[8,"Clone"],[3,"SpaceSep"],[3,"Formatter"],[6,"Result"],[3,"PerLine"],[3,"StrSep"],[3,"SpaceSepUsize1"],[3,"PerLineUsize1"],[3,"StrSepUsize1"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"union_find":{"doc":"","t":"DLLLLLLLLLLLLLL","n":["UnionFind","borrow","borrow_mut","count","equiv","from","into","new","partition","partition_len","repr","try_from","try_into","type_id","unite"],"q":[[0,"union_find"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2],2],[[1,2,2],3],[[]],[[]],[2,1],[1,[[4,[[4,[2]]]]]],[1,2],[[1,2],2],[[],5],[[],5],[[],6],[[1,2,2],3]],"c":[],"p":[[3,"UnionFind"],[15,"usize"],[15,"bool"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"usize_bounds":{"doc":"","t":"NNNIELLKLLLLKLLLL","n":["EndIndexLen","IndexOrder","StartIndexLen","UsizeBounds","UsizeOob","borrow","borrow_mut","checked_to_range","fmt","from","into","resolve_bounds","to_range","to_string","try_from","try_into","type_id"],"q":[[0,"usize_bounds"]],"d":["","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[3,3,3,0,0,3,3,9,3,3,3,3,9,3,3,3,3],"f":[0,0,0,0,0,[[]],[[]],[1,[[4,[[2,[1]],3]]]],[[3,5],6],[[]],[[]],[3,[[2,[1]]]],[1,[[2,[1]]]],[3,7],[[],4],[[],4],[[],8]],"c":[],"p":[[15,"usize"],[3,"Range"],[4,"UsizeOob"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"String"],[3,"TypeId"],[8,"UsizeBounds"]]},\
"uslice":{"doc":"","t":"IKIK","n":["Permutation","inv","Permutation","inv"],"q":[[0,"uslice"],[2,"uslice::permutation"]],"d":["","","",""],"i":[0,4,0,4],"f":[0,[[],[[3,[1,2]]]],0,[[],[[3,[1,2]]]]],"c":[],"p":[[15,"usize"],[3,"Global"],[3,"Vec"],[8,"Permutation"]]},\
"vec_segtree":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLL","n":["PeekMutTmp","VecSegtree","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","drop","fold","fold_bisect_from","fold_bisect_to","from","from","from","from","from_iter","index","into","into","peek_mut","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"vec_segtree"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,3,2,3,2,2,2,2,3,3,3,3,3,3,2,3,3,3,2,3,3,2,3,2,3,2],"f":[0,0,[[]],[[]],[[]],[[]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[[3,[1]],4]],[[[3,[1]],5,6]],[[[3,[1]],5,6]],[[],[[3,[1]]]],[[]],[7,[[3,[[0,[1,8]]]]]],[[]],[9,[[3,[[0,[1,8]]]]]],[[[3,[1]],5]],[[]],[[]],[[[3,[1]],5],[[2,[1]]]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"c":[],"p":[[8,"Monoid"],[3,"PeekMutTmp"],[3,"VecSegtree"],[8,"UsizeBounds"],[15,"usize"],[8,"Fn"],[3,"Vec"],[8,"Default"],[8,"IntoIterator"],[4,"Result"],[3,"TypeId"]]},\
"yes_no":{"doc":"","t":"DLLLLLLLLL","n":["YesNo","borrow","borrow_mut","fmt","from","into","to_string","try_from","try_into","type_id"],"q":[[0,"yes_no"]],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2],3],[[]],[[]],[[],4],[[],5],[[],5],[[],6]],"c":[],"p":[[3,"YesNo"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
