var searchIndex = JSON.parse('{\
"nekolib_doc":{"doc":"","t":"DDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDIIQDKLLLLLLLKLLLIIQDKKGDQIHILLLLLLKLLKOOLLLGDQIHIKLKOOOOOOGGIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLGGIDKIIIIINIINIIDIIQNIELLLLKLLLLKLLLKLKLLKLLLLLLLIIIIIIIIIIIQKKKDNNNIEKK","n":["PeekMutTmp","UnionFind","VecSegtree","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","count","deref","deref_mut","drop","equiv","fold","fold_bisect_from","fold_bisect_to","from","from","from","from","from","from_iter","index","into","into","into","new","partition","partition_len","peek_mut","repr","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unite","UnionFind","PeekMutTmp","VecSegtree","PerLine","PerLineUsize1","SpaceSep","SpaceSepUsize1","StrSep","StrSepUsize1","YesNo","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","PerLine","PerLineUsize1","SpaceSep","SpaceSepUsize1","StrSep","StrSepUsize1","YesNo","BinIter","Binary","Iter","UIntIter","bin_iter","borrow","borrow_mut","from","into","into_iter","new","next","pop","try_from","try_into","type_id","BinIter","Binary","Iter","UIntIter","bin_iter","pop","AutoSource","OnceSource","Output","Readable","STDIN_SOURCE","Source","borrow","borrow_mut","from","from","into","new","next_token","next_token","next_token_unwrap","read","read_value","scan","try_from","try_into","type_id","AutoSource","OnceSource","Output","Readable","STDIN_SOURCE","Source","next_token","next_token_unwrap","read","read_value","scan","qux1","qux_long","qux1","qux_long","ModInt1000000007","ModInt998244353","RemEuclidU32","StaticModInt","add","add","add","add","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","div","div","div","div","div_assign","div_assign","eq","equivalent","fmt","fmt","from","from","hash","into","modulus","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","new","product","product","rem_euclid_u32","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_string","try_from","try_into","type_id","ModInt1000000007","ModInt998244353","RemEuclidU32","StaticModInt","rem_euclid_u32","Associative","BinaryOp","Commutative","CommutativeGroup","CommutativeMonoid","EndIndexLen","Group","Identity","IndexOrder","Magma","Monoid","OpAdd","Recip","Semigroup","Set","StartIndexLen","UsizeBounds","UsizeOob","borrow","borrow","borrow_mut","borrow_mut","checked_to_range","default","fmt","from","from","id","id","into","into","op","op","recip","recip","resolve_bounds","to_range","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Associative","BinaryOp","Commutative","CommutativeGroup","CommutativeMonoid","Group","Identity","Magma","Monoid","Recip","Semigroup","Set","id","op","recip","OpAdd","EndIndexLen","IndexOrder","StartIndexLen","UsizeBounds","UsizeOob","checked_to_range","to_range"],"q":[[0,"nekolib_doc::ds"],[42,"nekolib_doc::ds::union_find"],[43,"nekolib_doc::ds::vec_segtree"],[45,"nekolib_doc::fmt"],[151,"nekolib_doc::fmt::str_sep"],[157,"nekolib_doc::fmt::yes_no"],[158,"nekolib_doc::integer"],[174,"nekolib_doc::integer::bin_iter"],[180,"nekolib_doc::io"],[201,"nekolib_doc::io::input"],[212,"nekolib_doc::macros"],[214,"nekolib_doc::macros::qux"],[216,"nekolib_doc::math"],[270,"nekolib_doc::math::modint"],[275,"nekolib_doc::ops"],[319,"nekolib_doc::ops::monoid"],[334,"nekolib_doc::ops::op_add"],[335,"nekolib_doc::ops::usize_bounds"]],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2 進法のイテレータ。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","2 進法のイテレータ。","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,6,4,1,6,4,1,4,4,4,1,6,6,6,1,6,6,6,4,6,6,1,6,4,1,1,1,6,1,1,6,4,1,6,4,1,6,4,1,0,0,0,0,0,0,0,0,0,0,16,19,20,21,22,23,24,16,19,20,21,22,23,24,16,16,16,16,16,16,16,16,16,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,23,23,23,23,23,24,24,24,24,24,16,19,20,21,22,23,24,16,19,20,21,22,23,24,16,19,20,21,22,23,24,16,19,20,21,22,23,24,16,19,20,21,22,23,24,16,19,20,21,22,23,24,0,0,0,0,0,0,0,0,0,45,0,45,27,27,27,27,27,27,27,26,27,27,27,0,0,45,0,45,26,0,0,46,0,0,0,33,33,33,33,33,33,35,33,35,46,0,0,33,33,33,0,0,46,0,0,0,35,35,46,0,0,0,0,0,0,0,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,0,37,0,0,0,0,0,42,0,0,42,0,0,0,0,0,47,42,0,0,43,42,43,42,7,43,42,43,42,48,43,43,42,47,43,49,43,42,7,42,43,42,43,42,43,42,0,0,0,0,0,0,0,0,0,0,0,47,48,47,49,0,42,42,42,0,0,7,7],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],2],[[[4,[3]]]],[[[4,[3]]]],[[[4,[3]]]],[[1,2,2],5],[[[6,[3]],7]],[[[6,[3]],2,8]],[[[6,[3]],2,8]],[[]],[[]],[[[10,[9]]],[[6,[[0,[3,11]]]]]],[[],[[6,[3]]]],[[]],[12,[[6,[[0,[3,11]]]]]],[[[6,[3]],2]],[[]],[[]],[[]],[2,1],[1,[[10,[[10,[2,9]],9]]]],[1,2],[[[6,[3]],2],[[4,[3]]]],[[1,2],2],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[1,2,2],5],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[[16,[[0,[12,15]]]],17],[[13,[18]]]],[[19,17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[20,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[21,[[0,[12,15]]]],17],[[13,[18]]]],[[[22,[[0,[12,15]]]],17],[[13,[18]]]],[[[22,[[0,[12,15]]]],17],[[13,[18]]]],[[[22,[[0,[12,15]]]],17],[[13,[18]]]],[[[22,[[0,[12,15]]]],17],[[13,[18]]]],[[[22,[[0,[12,15]]]],17],[[13,[18]]]],[[[23,[[0,[12,15]]]],17],[[13,[18]]]],[[[23,[[0,[12,15]]]],17],[[13,[18]]]],[[[23,[[0,[12,15]]]],17],[[13,[18]]]],[[[23,[[0,[12,15]]]],17],[[13,[18]]]],[[[23,[[0,[12,15]]]],17],[[13,[18]]]],[[[24,[[0,[12,15]]]],17],[[13,[18]]]],[[[24,[[0,[12,15]]]],17],[[13,[18]]]],[[[24,[[0,[12,15]]]],17],[[13,[18]]]],[[[24,[[0,[12,15]]]],17],[[13,[18]]]],[[[24,[[0,[12,15]]]],17],[[13,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[26,[[27,[26]]]],[[[27,[26]]],28],[[],[[28,[5]]]],[[],13],[[],13],[[],14],0,0,0,0,[[]],[[],[[28,[5]]]],0,0,0,0,0,0,[[]],[[]],[29,[[33,[[32,[[31,[30]]]]]]]],[[]],[[]],[34,[[33,[34]]]],[[],[[28,[25]]]],[[[33,[34]]],[[28,[25]]]],[[],25],[[[35,[34]]]],0,0,[[],13],[[],13],[[],14],0,0,0,0,0,0,[[],[[28,[25]]]],[[],25],[[[35,[34]]]],0,0,0,0,0,0,0,0,0,0,[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[]],[[]],[36,36],[[]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36],5],[[],5],[[36,17],[[13,[18]]]],[[36,17],[[13,[18]]]],[[]],[37,36],[[36,38]],[[]],[[],39],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[36],[36],[37,36],[40,36],[40,36],[39,39],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[[36,36]],[40,36],[40,36],[[]],[[],25],[[],13],[[],13],[[],14],0,0,0,0,[39,39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[2,[[13,[[41,[2]],42]]]],[[],43],[[42,17],[[13,[18]]]],[[]],[[]],[[]],[[[43,[[44,[[44,[[44,[44]]]]]]]]],[[44,[[44,[[44,[[44,[44]]]]]]]]]],[[]],[[]],[[]],[43],[[]],[[[43,[[44,[[44,[[44,[44]]]]]]]],[44,[[44,[[44,[[44,[44]]]]]]]]],[[44,[[44,[[44,[[44,[44]]]]]]]]]],[42,[[41,[2]]]],[2,[[41,[2]]]],[42,25],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,[2,[[13,[[41,[2]],42]]]],[2,[[41,[2]]]]],"c":[],"p":[[3,"UnionFind"],[15,"usize"],[8,"Monoid"],[3,"PeekMutTmp"],[15,"bool"],[3,"VecSegtree"],[8,"UsizeBounds"],[8,"Fn"],[3,"Global"],[3,"Vec"],[8,"Default"],[8,"IntoIterator"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"SpaceSep"],[3,"Formatter"],[3,"Error"],[3,"YesNo"],[3,"PerLine"],[3,"StrSep"],[3,"SpaceSepUsize1"],[3,"PerLineUsize1"],[3,"StrSepUsize1"],[3,"String"],[8,"Binary"],[3,"UIntIter"],[4,"Option"],[15,"str"],[15,"u8"],[15,"slice"],[3,"BufReader"],[3,"OnceSource"],[8,"BufRead"],[8,"Source"],[3,"StaticModInt"],[8,"RemEuclidU32"],[8,"Hasher"],[15,"u32"],[8,"Iterator"],[3,"Range"],[4,"UsizeOob"],[3,"OpAdd"],[8,"Sum"],[8,"BinIter"],[8,"Readable"],[8,"BinaryOp"],[8,"Identity"],[8,"Recip"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
