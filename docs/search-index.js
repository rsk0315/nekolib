var searchIndex = JSON.parse('{\
"bar":{"doc":"bar","t":"FF","n":["bar1_fn","bar1_fn"],"q":[[0,"bar"],[1,"bar::bar1"]],"d":["",""],"i":[0,0],"f":[[[]],[[]]],"c":[],"p":[]},\
"bar1":{"doc":"","t":"F","n":["bar1_fn"],"q":[[0,"bar1"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"baz":{"doc":"baz","t":"FF","n":["baz1_fn","baz1_fn"],"q":[[0,"baz"],[1,"baz::baz1"]],"d":["",""],"i":[0,0],"f":[[[]],[[]]],"c":[],"p":[]},\
"baz1":{"doc":"","t":"F","n":["baz1_fn"],"q":[[0,"baz1"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"foo":{"doc":"foo","t":"FFFF","n":["foo1_fn","foo2_fn","foo1_fn","foo2_fn"],"q":[[0,"foo"],[2,"foo::foo1"],[3,"foo::foo2"]],"d":["","","",""],"i":[0,0,0,0],"f":[[[]],[[]],[[]],[[]]],"c":[],"p":[]},\
"foo1":{"doc":"","t":"F","n":["foo1_fn"],"q":[[0,"foo1"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"foo2":{"doc":"","t":"F","n":["foo2_fn"],"q":[[0,"foo2"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"inner":{"doc":"","t":"O","n":["doc_inline_reexport"],"q":[[0,"inner"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"katex_support":{"doc":"$<code>\\\\KaTeX</code>$ support","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"macros":{"doc":"","t":"OOOO","n":["qux1","qux_long","qux1","qux_long"],"q":[[0,"macros"],[2,"macros::qux"]],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,0,0],"c":[],"p":[]},\
"nekolib_doc":{"doc":"","t":"FFFFFFFFOOOO","n":["bar1_fn","bar1_fn","baz1_fn","baz1_fn","foo1_fn","foo2_fn","foo1_fn","foo2_fn","qux1","qux_long","qux1","qux_long"],"q":[[0,"nekolib_doc::bar"],[1,"nekolib_doc::bar::bar1"],[2,"nekolib_doc::baz"],[3,"nekolib_doc::baz::baz1"],[4,"nekolib_doc::foo"],[6,"nekolib_doc::foo::foo1"],[7,"nekolib_doc::foo::foo2"],[8,"nekolib_doc::macros"],[10,"nekolib_doc::macros::qux"]],"d":["","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0],"c":[],"p":[]},\
"num_bigint":{"doc":"A Big integer (signed version: <code>BigInt</code>, unsigned version: â€¦","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count_ones","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd_lcm","gcd_lcm","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","into_original","into_parts","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","last","last","lcm","lcm","len","len","magnitude","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","next","next","next_back","next_back","next_multiple_of","next_multiple_of","not","not","nth","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","product","product","provide","provide","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_bit","set_bit","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero"],"q":[[0,"num_bigint"]],"d":["A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>â€™s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This â€¦","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion â€¦","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or â€¦","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the â€¦","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> â€“ see â€¦","","Returns the truncated principal cube root of <code>self</code> â€“ see â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","","","","","","Greatest common divisor, least common multiple, and â€¦","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","Creates and initializes a <code>BigInt</code>. Each u8 of the input â€¦","Creates and initializes a <code>BigUint</code>. Each u8 of the input â€¦","Creates and initializes a <code>BigInt</code>. Each u8 of the input â€¦","Creates and initializes a <code>BigUint</code>. Each u8 of the input â€¦","Creates and initializes a <code>BigInt</code> from an array of bytes in â€¦","Creates and initializes a <code>BigInt</code> from an array of bytes in â€¦","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the number â€¦","Calculates the Greatest Common Divisor (GCD) of the number â€¦","Calculates the Greatest Common Divisor (GCD) and Lowest â€¦","Calculates the Greatest Common Divisor (GCD) and Lowest â€¦","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the original value, if available. The value will â€¦","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, â€¦","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Returns an iterator of <code>u32</code> digits representation of the â€¦","Returns an iterator of <code>u32</code> digits representation of the â€¦","Returns an iterator of <code>u64</code> digits representation of the â€¦","Returns an iterator of <code>u64</code> digits representation of the â€¦","","","Calculates the Lowest Common Multiple (LCM) of the number â€¦","Calculates the Lowest Common Multiple (LCM) of the number â€¦","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate Sign value.","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> â€“ See â€¦","","","Returns the truncated principal <code>n</code>th root of <code>self</code> â€“ see â€¦","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must â€¦","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position, using the twoâ€¦","Sets or clears the bit in the given position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","","Returns the truncated principal square root of <code>self</code> â€“ â€¦","","Returns the truncated principal square root of <code>self</code> â€“ â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if itâ€™s not â€¦","","Returns the sign and the byte representation of the <code>BigInt</code> â€¦","Returns the byte representation of the <code>BigUint</code> in â€¦","Returns the sign and the byte representation of the <code>BigInt</code> â€¦","Returns the byte representation of the <code>BigUint</code> in â€¦","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian â€¦","Returns the integer in the requested base in big-endian â€¦","Returns the integer in the requested base in little-endian â€¦","Returns the integer in the requested base in little-endian â€¦","Returns the twoâ€™s-complement byte representation of the â€¦","Returns the twoâ€™s-complement byte representation of the â€¦","Returns the integer formatted as a string in the given â€¦","Returns the integer formatted as a string in the given â€¦","","","","","","","Returns the sign and the <code>u32</code> digits representation of the â€¦","Returns the <code>u32</code> digits representation of the <code>BigUint</code> â€¦","","","Returns the sign and the <code>u64</code> digits representation of the â€¦","Returns the <code>u64</code> digits representation of the <code>BigUint</code> â€¦","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,15,15,0,15,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,1,1,1,14,14,14,14,1,1,14,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,23,24,14,15,19,21,1,23,24,14,15,19,21,1,1,14,14,1,1,14,1,1,14,1,1,14,1,1,14,1,14,15,19,21,1,14,1,14,15,19,21,1,14,15,23,24,14,1,14,19,21,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,14,1,14,15,19,21,1,14,15,19,21,1,1,1,1,1,1,1,14,14,14,14,14,14,15,19,19,21,21,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,24,14,14,14,14,14,14,14,15,19,21,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,15,1,23,24,14,15,19,21,23,24,21,1,1,14,1,14,1,1,14,1,14,1,1,14,1,14,1,14,23,24,1,14,23,24,1,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,1,15,1,14,23,24,23,24,1,14,1,1,24,1,1,14,14,1,14,1,14,1,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,14,1,14,19,21,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,23,24,1,1,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,39,1,14,40,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,15,19,21,1,14,1,14,1,1,1,14,1,14,19,21,1,14,1,14,1,14,1,14,14,1,14,1,23,24,14,14,14,14,14,14,14,14,14,15,19,21,1,23,24,14,15,19,21,1,23,24,14,15,19,21,1,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,2],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,2],1],[[1,7],1],[[1,8],1],[[1,8],1],[[1,9],1],[[1,10],1],[[1,11],1],[[1,7],1],[[1,5],1],[[1,6],1],[[1,11],1],[[1,7],1],[[1,1],1],[[1,9],1],[[1,1],1],[[1,12],1],[[1,3],1],[[1,8],1],[[1,9],1],[[1,5],1],[[1,12],1],[[1,10],1],[[1,12],1],[[1,11],1],[[1,1],1],[[1,10],1],[[1,12],1],[[1,6],1],[[1,13],1],[[1,2],1],[[1,7],1],[[1,13],1],[[1,8],1],[[1,9],1],[[1,13],1],[[1,3],1],[[1,1],1],[[1,13],1],[[1,11],1],[[1,5],1],[[1,4],1],[[1,3],1],[[1,10],1],[[1,4],1],[[1,4],1],[[1,6],1],[[14,12],14],[[14,14],14],[[14,4],14],[[14,5],14],[[14,13],14],[[14,10],14],[[14,13],14],[[14,2],14],[[14,12],14],[[14,13],14],[[14,13],14],[[14,4],14],[[14,5],14],[[14,14],14],[[14,10],14],[[14,12],14],[[14,2],14],[[14,2],14],[[14,5],14],[[14,12],14],[[14,10],14],[[14,4],14],[[14,5],14],[[14,2],14],[[14,4],14],[[14,14],14],[[14,14],14],[[14,10],14],[[1,2]],[[1,4]],[[1,9]],[[1,10]],[[1,12]],[[1,8]],[[1,6]],[[1,7]],[[1,5]],[[1,3]],[[1,11]],[[1,1]],[[1,13]],[[1,1]],[[14,12]],[[14,14]],[[14,2]],[[14,13]],[[14,14]],[[14,5]],[[14,4]],[[14,10]],[[1,15,[16,[5]]]],[[14,[16,[5]]]],[[]],[[]],[[]],[[]],[[1,13],17],[[14,13],17],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[1,13],[14,13],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[1,1],[14,14],[14,14],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[14,14],[[18,[14]]]],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[14,14],[[18,[14]]]],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[14,14],[[18,[14]]]],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[14,14],[[18,[14]]]],[1,1],[14,14],[15,15],[19,19],[[[21,[20]]],[[21,[20]]]],[[1,1]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[1,1],22],[[14,14],22],[[15,15],22],[23,2],[24,2],[14,13],[[],1],[[],14],[19,25],[[[21,[26]]],25],[[1,1],1],[[1,3],1],[[1,4],1],[[1,13],1],[[1,7],1],[[1,9],1],[[1,7],1],[[1,10],1],[[1,8],1],[[1,13],1],[[1,6],1],[[1,11],1],[[1,2],1],[[1,4],1],[[1,13],1],[[1,2],1],[[1,5],1],[[1,12],1],[[1,3],1],[[1,5],1],[[1,10],1],[[1,3],1],[[1,2],1],[[1,1],1],[[1,9],1],[[1,8],1],[[1,6],1],[[1,5],1],[[1,1],1],[[1,7],1],[[1,11],1],[[1,12],1],[[1,6],1],[[1,11],1],[[1,13],1],[[1,11],1],[[1,4],1],[[1,5],1],[[1,9],1],[[1,7],1],[[1,8],1],[[1,2],1],[[1,3],1],[[1,9],1],[[1,1],1],[[1,10],1],[[1,8],1],[[1,10],1],[[1,6],1],[[1,12],1],[[1,12],1],[[1,4],1],[[14,2],14],[[14,4],14],[[14,5],14],[[14,10],14],[[14,10],14],[[14,14],14],[[14,12],14],[[14,14],14],[[14,13],14],[[14,5],14],[[14,2],14],[[14,13],14],[[14,12],14],[[14,4],14],[[14,10],14],[[14,4],14],[[14,2],14],[[14,4],14],[[14,10],14],[[14,14],14],[[14,5],14],[[14,13],14],[[14,2],14],[[14,14],14],[[14,12],14],[[14,13],14],[[14,12],14],[[14,5],14],[[1,12]],[[1,9]],[[1,11]],[[1,10]],[[1,13]],[[1,5]],[[1,1]],[[1,4]],[[1,3]],[[1,8]],[[1,2]],[[1,7]],[[1,1]],[[1,6]],[[14,5]],[[14,13]],[[14,12]],[[14,4]],[[14,14]],[[14,14]],[[14,2]],[[14,10]],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[[1,1]],[[14,14]],[[1,1],17],[[14,14],17],[[1,1],17],[[14,14],17],[[15,15],17],[[19,19],17],[[[21,[27]],[21,[27]]],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[1,1]],[[1,28],29],[[1,28],29],[[1,28],29],[[1,28],29],[[1,28],29],[[1,28],29],[[14,28],29],[[14,28],29],[[14,28],29],[[14,28],29],[[14,28],29],[[14,28],29],[[15,28],29],[[19,28],29],[[19,28],29],[[21,28],29],[[[21,[26]],28],29],[4,1],[5,1],[[]],[14,1],[6,1],[7,1],[9,1],[10,1],[11,1],[13,1],[8,1],[3,1],[2,1],[12,1],[[]],[[]],[2,14],[5,14],[[]],[12,14],[10,14],[4,14],[13,14],[[]],[[]],[[]],[[15,14],1],[[15,[16,[4]]],1],[[[16,[4]]],14],[[15,[16,[4]]],1],[[[16,[4]]],14],[30,[[18,[1]]]],[30,[[18,[14]]]],[6,[[18,[1]]]],[6,[[18,[14]]]],[3,[[18,[1]]]],[3,[[18,[14]]]],[[15,[16,[4]],5],[[18,[1]]]],[[[16,[4]],5],[[18,[14]]]],[[15,[16,[4]],5],[[18,[1]]]],[[[16,[4]],5],[[18,[14]]]],[[[16,[4]]],1],[[[16,[4]]],1],[[15,[16,[5]]],1],[[[16,[5]]],14],[25,[[31,[1,19]]]],[25,[[31,[14,19]]]],[[25,5],[[31,[1,19]]]],[[25,5],[[31,[14,19]]]],[10,[[18,[1]]]],[10,[[18,[14]]]],[13,[[18,[1]]]],[13,[[18,[14]]]],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[[1,32]],[[14,32]],[[15,32]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21],[1],[1,17],[14,17],[[1,1],17],[[14,14],17],[1,17],[1,17],[14,17],[1,17],[14,17],[1,17],[1,17],[14,17],[1,23],[14,23],[1,24],[14,24],[23,[[18,[5]]]],[24,[[18,[13]]]],[[1,1],1],[[14,14],14],[23,2],[24,2],[1,14],[[1,1],1],[[14,14],14],[[1,1,1],1],[[14,14,14],14],[[1,3],1],[[1,9],1],[[1,6],1],[[1,5],1],[[1,11],1],[[1,13],1],[[1,9],1],[[1,2],1],[[1,8],1],[[1,10],1],[[1,3],1],[[1,3],1],[[1,9],1],[[1,8],1],[[1,7],1],[[1,6],1],[[1,1],1],[[1,8],1],[[1,5],1],[[1,6],1],[[1,1],1],[[1,10],1],[[1,12],1],[[1,3],1],[[1,12],1],[[1,13],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,1],1],[[1,11],1],[[1,8],1],[[1,13],1],[[1,7],1],[[1,10],1],[[1,6],1],[[1,4],1],[[1,12],1],[[1,2],1],[[1,11],1],[[1,5],1],[[1,7],1],[[1,12],1],[[1,2],1],[[1,9],1],[[1,11],1],[[1,13],1],[[1,5],1],[[1,2],1],[[1,1],1],[[1,10],1],[[1,7],1],[[14,13],14],[[14,2],14],[[14,14],14],[[14,12],14],[[14,13],14],[[14,10],14],[[14,12],14],[[14,12],14],[[14,2],14],[[14,10],14],[[14,5],14],[[14,13],14],[[14,14],14],[[14,4],14],[[14,2],14],[[14,10],14],[[14,4],14],[[14,14],14],[[14,4],14],[[14,5],14],[[14,10],14],[[14,4],14],[[14,12],14],[[14,13],14],[[14,2],14],[[14,5],14],[[14,14],14],[[14,5],14],[[15,15],15],[[1,7]],[[1,12]],[[1,2]],[[1,1]],[[1,13]],[[1,5]],[[1,6]],[[1,11]],[[1,9]],[[1,1]],[[1,3]],[[1,8]],[[1,10]],[[1,4]],[[14,2]],[[14,13]],[[14,12]],[[14,10]],[[14,14]],[[14,4]],[[14,5]],[[14,14]],[1,1],[1,1],[15,15],[[15,[33,[5]]],1],[[[33,[5]]],14],[23,[[18,[5]]]],[24,[[18,[13]]]],[23,18],[24,18],[[1,1],1],[[14,14],14],[1,1],[1,1],[[24,2],[[18,[13]]]],[[1,5],1],[[1,5],1],[[14,5],14],[[14,5],14],[[],1],[[],14],[[[16,[4]],5],[[18,[1]]]],[[[16,[4]],5],[[18,[14]]]],[[1,1],[[18,[22]]]],[[14,14],[[18,[22]]]],[[15,15],[[18,[22]]]],[[1,5],1],[[1,4],1],[[1,5],1],[[1,13],1],[[1,2],1],[[1,10],1],[[1,4],1],[[1,5],1],[[1,2],1],[[1,10],1],[[1,4],1],[[1,14],1],[[1,4],1],[[1,13],1],[[1,12],1],[[1,2],1],[[1,10],1],[[1,14],1],[[1,12],1],[[1,14],1],[[1,10],1],[[1,5],1],[[1,5],1],[[1,13],1],[[1,13],1],[[1,12],1],[[1,12],1],[[1,14],1],[[1,2],1],[[14,10],14],[[14,2],14],[[14,13],14],[[14,4],14],[[14,12],14],[[14,13],14],[[14,12],14],[[14,14],14],[[14,12],14],[[14,14],14],[[14,10],14],[[14,10],14],[[14,2],14],[[14,5],14],[[14,14],14],[[14,10],14],[[14,13],14],[[14,5],14],[[14,4],14],[[14,5],14],[[14,4],14],[[14,2],14],[[14,5],14],[[14,12],14],[[14,4],14],[[14,2],14],[[14,13],14],[[14,5],14],[[14,14],14],[[1,1],1],[[14,14],14],[34,1],[34,14],[35],[35],[[1,2],1],[[1,4],1],[[1,4],1],[[1,5],1],[[1,10],1],[[1,8],1],[[1,7],1],[[1,1],1],[[1,3],1],[[1,12],1],[[1,1],1],[[1,4],1],[[1,6],1],[[1,11],1],[[1,9],1],[[1,8],1],[[1,12],1],[[1,9],1],[[1,12],1],[[1,5],1],[[1,7],1],[[1,5],1],[[1,3],1],[[1,7],1],[[1,8],1],[[1,6],1],[[1,5],1],[[1,7],1],[[1,2],1],[[1,13],1],[[1,6],1],[[1,2],1],[[1,11],1],[[1,3],1],[[1,1],1],[[1,6],1],[[1,11],1],[[1,8],1],[[1,11],1],[[1,3],1],[[1,13],1],[[1,9],1],[[1,12],1],[[1,4],1],[[1,13],1],[[1,9],1],[[1,13],1],[[1,10],1],[[1,10],1],[[1,1],1],[[1,10],1],[[1,2],1],[[14,4],14],[[14,10],14],[[14,12],14],[[14,5],14],[[14,14],14],[[14,10],14],[[14,5],14],[[14,14],14],[[14,2],14],[[14,13],14],[[14,12],14],[[14,5],14],[[14,13],14],[[14,2],14],[[14,14],14],[[14,2],14],[[14,4],14],[[14,4],14],[[14,10],14],[[14,13],14],[[14,4],14],[[14,2],14],[[14,13],14],[[14,12],14],[[14,14],14],[[14,5],14],[[14,10],14],[[14,12],14],[[1,1]],[[1,12]],[[1,7]],[[1,8]],[[1,3]],[[1,9]],[[1,2]],[[1,11]],[[1,10]],[[1,5]],[[1,13]],[[1,6]],[[1,1]],[[1,4]],[[14,12]],[[14,14]],[[14,13]],[[14,5]],[[14,2]],[[14,14]],[[14,4]],[[14,10]],[[1,13,17]],[[14,13,17]],[1],[14],[1],[14],[[1,9],1],[[1,7],1],[[1,12],1],[[1,13],1],[[1,7],1],[[1,11],1],[[1,10],1],[[1,2],1],[[1,12],1],[[1,8],1],[[1,13],1],[[1,11],1],[[1,2],1],[[1,7],1],[[1,9],1],[[1,4],1],[[1,4],1],[[1,8],1],[[1,3],1],[[1,5],1],[[1,8],1],[[1,12],1],[[1,4],1],[[1,11],1],[[1,13],1],[[1,12],1],[[1,8],1],[[1,6],1],[[1,9],1],[[1,11],1],[[1,6],1],[[1,2],1],[[1,5],1],[[1,3],1],[[1,10],1],[[1,6],1],[[1,10],1],[[1,13],1],[[1,10],1],[[1,3],1],[[1,9],1],[[1,2],1],[[1,4],1],[[1,6],1],[[1,5],1],[[1,3],1],[[1,5],1],[[1,7],1],[[14,2],14],[[14,4],14],[[14,10],14],[[14,3],14],[[14,12],14],[[14,13],14],[[14,4],14],[[14,13],14],[[14,11],14],[[14,9],14],[[14,5],14],[[14,6],14],[[14,8],14],[[14,11],14],[[14,2],14],[[14,3],14],[[14,6],14],[[14,2],14],[[14,7],14],[[14,4],14],[[14,13],14],[[14,11],14],[[14,6],14],[[14,3],14],[[14,13],14],[[14,8],14],[[14,10],14],[[14,10],14],[[14,2],14],[[14,8],14],[[14,10],14],[[14,9],14],[[14,6],14],[[14,11],14],[[14,7],14],[[14,7],14],[[14,3],14],[[14,9],14],[[14,7],14],[[14,8],14],[[14,12],14],[[14,5],14],[[14,12],14],[[14,12],14],[[14,5],14],[[14,9],14],[[14,5],14],[[14,4],14],[[1,12]],[[1,13]],[[1,7]],[[1,4]],[[1,2]],[[1,8]],[[1,6]],[[1,9]],[[1,5]],[[1,8]],[[1,13]],[[1,10]],[[1,6]],[[1,4]],[[1,12]],[[1,5]],[[1,11]],[[1,2]],[[1,3]],[[1,11]],[[1,7]],[[1,10]],[[1,3]],[[1,9]],[[14,3]],[[14,9]],[[14,10]],[[14,13]],[[14,13]],[[14,2]],[[14,8]],[[14,6]],[[14,10]],[[14,5]],[[14,4]],[[14,5]],[[14,8]],[[14,9]],[[14,2]],[[14,7]],[[14,11]],[[14,3]],[[14,6]],[[14,12]],[[14,12]],[[14,7]],[[14,4]],[[14,11]],[[1,6],1],[[1,8],1],[[1,13],1],[[1,9],1],[[1,13],1],[[1,11],1],[[1,4],1],[[1,7],1],[[1,8],1],[[1,2],1],[[1,9],1],[[1,5],1],[[1,10],1],[[1,13],1],[[1,13],1],[[1,3],1],[[1,5],1],[[1,12],1],[[1,10],1],[[1,11],1],[[1,5],1],[[1,11],1],[[1,3],1],[[1,10],1],[[1,12],1],[[1,3],1],[[1,9],1],[[1,12],1],[[1,7],1],[[1,4],1],[[1,4],1],[[1,5],1],[[1,8],1],[[1,9],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,6],1],[[1,3],1],[[1,10],1],[[1,7],1],[[1,6],1],[[1,7],1],[[1,8],1],[[1,4],1],[[1,11],1],[[1,12],1],[[1,6],1],[[14,9],14],[[14,2],14],[[14,10],14],[[14,11],14],[[14,10],14],[[14,7],14],[[14,5],14],[[14,13],14],[[14,11],14],[[14,11],14],[[14,4],14],[[14,10],14],[[14,13],14],[[14,5],14],[[14,8],14],[[14,5],14],[[14,8],14],[[14,6],14],[[14,3],14],[[14,7],14],[[14,13],14],[[14,8],14],[[14,5],14],[[14,3],14],[[14,3],14],[[14,4],14],[[14,11],14],[[14,10],14],[[14,8],14],[[14,13],14],[[14,9],14],[[14,12],14],[[14,4],14],[[14,6],14],[[14,9],14],[[14,2],14],[[14,2],14],[[14,3],14],[[14,7],14],[[14,12],14],[[14,6],14],[[14,4],14],[[14,7],14],[[14,6],14],[[14,12],14],[[14,9],14],[[14,12],14],[[14,2],14],[[1,3]],[[1,6]],[[1,8]],[[1,11]],[[1,7]],[[1,8]],[[1,12]],[[1,2]],[[1,13]],[[1,13]],[[1,6]],[[1,4]],[[1,3]],[[1,5]],[[1,9]],[[1,12]],[[1,5]],[[1,11]],[[1,7]],[[1,4]],[[1,9]],[[1,2]],[[1,10]],[[1,10]],[[14,7]],[[14,13]],[[14,12]],[[14,6]],[[14,8]],[[14,2]],[[14,4]],[[14,7]],[[14,9]],[[14,3]],[[14,3]],[[14,6]],[[14,13]],[[14,5]],[[14,12]],[[14,10]],[[14,9]],[[14,11]],[[14,5]],[[14,10]],[[14,11]],[[14,4]],[[14,2]],[[14,8]],[1,15],[1,1],[23],[24],[1,1],[1,1],[14,14],[14,14],[[1,4],1],[[1,8],1],[[1,2],1],[[1,11],1],[[1,12],1],[[1,6],1],[[1,1],1],[[1,7],1],[[1,9],1],[[1,4],1],[[1,11],1],[[1,4],1],[[1,13],1],[[1,3],1],[[1,6],1],[[1,10],1],[[1,12],1],[[1,5],1],[[1,10],1],[[1,12],1],[[1,1],1],[[1,10],1],[[1,13],1],[[1,2],1],[[1,6],1],[[1,1],1],[[1,3],1],[[1,13],1],[[1,8],1],[[1,7],1],[[1,5],1],[[1,2],1],[[1,3],1],[[1,10],1],[[1,13],1],[[1,8],1],[[1,9],1],[[1,5],1],[[1,7],1],[[1,1],1],[[1,8],1],[[1,11],1],[[1,9],1],[[1,3],1],[[1,12],1],[[1,4],1],[[1,7],1],[[1,9],1],[[1,11],1],[[1,6],1],[[1,5],1],[[1,2],1],[[14,2],14],[[14,4],14],[[14,2],14],[[14,5],14],[[14,5],14],[[14,14],14],[[14,10],14],[[14,14],14],[[14,13],14],[[14,2],14],[[14,10],14],[[14,4],14],[[14,12],14],[[14,5],14],[[14,14],14],[[14,13],14],[[14,13],14],[[14,4],14],[[14,4],14],[[14,2],14],[[14,5],14],[[14,10],14],[[14,10],14],[[14,12],14],[[14,12],14],[[14,13],14],[[14,12],14],[[14,14],14],[[1,12]],[[1,7]],[[1,5]],[[1,11]],[[1,1]],[[1,1]],[[1,2]],[[1,3]],[[1,6]],[[1,4]],[[1,8]],[[1,10]],[[1,9]],[[1,13]],[[14,12]],[[14,5]],[[14,14]],[[14,2]],[[14,13]],[[14,10]],[[14,14]],[[14,4]],[34,1],[34,14],[[],[[18,[1]]]],[1,[[18,[1]]]],[14,[[18,[1]]]],[[],[[18,[14]]]],[1,[[18,[14]]]],[1,[[18,[14]]]],[14,[[18,[14]]]],[1],[14,[[33,[4]]]],[1],[14,[[33,[4]]]],[1,[[18,[36]]]],[14,[[18,[36]]]],[1,[[18,[30]]]],[14,[[18,[30]]]],[1,[[18,[6]]]],[14,[[18,[6]]]],[1,[[18,[3]]]],[14,[[18,[3]]]],[[]],[[]],[[]],[[]],[[]],[[1,5]],[[14,5],[[33,[4]]]],[[1,5]],[[14,5],[[33,[4]]]],[1,[[33,[4]]]],[1,[[33,[4]]]],[[1,5],37],[[14,5],37],[[],37],[[],37],[[],37],[[],37],[1,[[18,[10]]]],[14,[[18,[10]]]],[1],[14,[[33,[5]]]],[1,[[18,[13]]]],[14,[[18,[13]]]],[1],[14,[[33,[13]]]],[14,13],[1,[[18,[13]]]],[14,[[18,[13]]]],[[],31],[[],31],[[],31],[7,[[31,[14,21]]]],[11,[[31,[14,21]]]],[1,[[31,[14,21]]]],[1,[[31,[14,[21,[1]]]]]],[[],31],[8,[[31,[14,21]]]],[9,[[31,[14,21]]]],[6,[[31,[14,21]]]],[3,[[31,[14,21]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],1],[[],14]],"c":[],"p":[[3,"BigInt"],[15,"usize"],[15,"i64"],[15,"u8"],[15,"u32"],[15,"i128"],[15,"i32"],[15,"i8"],[15,"i16"],[15,"u128"],[15,"isize"],[15,"u16"],[15,"u64"],[3,"BigUint"],[4,"Sign"],[15,"slice"],[15,"bool"],[4,"Option"],[3,"ParseBigIntError"],[8,"Clone"],[3,"TryFromBigIntError"],[4,"Ordering"],[3,"U32Digits"],[3,"U64Digits"],[15,"str"],[8,"Debug"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[15,"f64"],[4,"Result"],[8,"Hasher"],[3,"Vec"],[8,"Iterator"],[3,"Demand"],[15,"f32"],[3,"String"],[3,"TypeId"],[8,"ToBigInt"],[8,"ToBigUint"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":"IDIDIFKFKFLLLLFLLLLFLFKFLFKKLLLLLLLFKMFLLLLKKKFKFKFLLLFKLFLLLLLLLLLMM","n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","equivalent","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":[[0,"num_integer"]],"d":["Provides methods to compute the average of two integers, â€¦","Greatest common divisor and BÃ©zout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integerâ€™s square root, â€¦","Returns the ceiling value of the average of <code>x</code> and <code>y</code> â€“ â€¦","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> â€“ see â€¦","Returns the floor value of the average of <code>self</code> and <code>other</code>. â€¦","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer â€“","Returns the truncated principal cube root of an integer â€“","Returns the truncated principal cube root of an integer â€“","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns â€¦","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. â€¦","Deprecated, use <code>is_multiple_of</code> instead.","","","Greatest common divisor and BÃ©zout coefficients.","Greatest common divisor, least common multiple, and â€¦","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number â€¦","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest â€¦","Greatest Common Divisor (GCD) and Lowest Common Multiple â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number â€¦","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients â€¦","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer â€“ â€¦","Returns the truncated principal <code>n</code>th root of an integer â€“ â€¦","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer â€¦","Returns the truncated principal square root of an integer â€¦","Returns the truncated principal square root of an integer â€¦","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,14,5,14,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,5,2,2,5,14,5,0,2,5,0,2,14,5,14,2,2,2,0,2,0,2,0,14,14,2,0,4,2,0,4,4,5,14,5,14,5,14,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],[5,[7]]],6],[[],6],[[3,3],[[5,[3]]]],[[[0,[3,8]],[0,[3,8]]]],[[[5,[9]],10],11],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[[13,[[0,[[12,[[0,[[12,[[0,[[12,[[0,[12,2,3]]]],2,3]]]],2,3]]]],2,3]]]]],[[0,[[12,[[0,[[12,[[0,[[12,[[0,[[12,[[0,[12,2,3]]]],2,3]]]],2,3]]]],2,3]]]],2,3]]]],[2,[[14,[2]]]],[[[14,[[0,[2,3]]]]],[[15,[[0,[2,3]]]]]],[[3,3],3],[[4,16],4],[16],[[3,3],3],[4,4],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],0,0],"c":[],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Signed"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Add"],[15,"slice"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[88,"num_traits::bounds"],[95,"num_traits::cast"],[130,"num_traits::float"],[239,"num_traits::identities"],[249,"num_traits::int"],[269,"num_traits::ops"],[276,"num_traits::ops::checked"],[292,"num_traits::ops::euclid"],[298,"num_traits::ops::inv"],[301,"num_traits::ops::mul_add"],[306,"num_traits::ops::overflowing"],[312,"num_traits::ops::saturating"],[321,"num_traits::ops::wrapping"],[333,"num_traits::pow"],[338,"num_traits::real"],[386,"num_traits::sign"]],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, â€¦","The trait for <code>Num</code> types which also implement assignment â€¦","Generic trait for types implementing numeric assignment â€¦","The trait for <code>NumAssign</code> types which also implement â€¦","","Generic trait for types implementing basic numeric â€¦","The trait for <code>Num</code> types which also implement numeric â€¦","","","","","The trait for <code>Num</code> references which implement numeric â€¦","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars â€¦","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted â€¦","Converts a <code>f32</code> to return an optional value of this type. â€¦","Converts a <code>f64</code> to return an optional value of this type. â€¦","Converts an <code>i128</code> to return an optional value of this type. â€¦","Converts an <code>i16</code> to return an optional value of this type. â€¦","Converts an <code>i32</code> to return an optional value of this type. â€¦","Converts an <code>i64</code> to return an optional value of this type. â€¦","Converts an <code>i8</code> to return an optional value of this type. â€¦","Converts an <code>isize</code> to return an optional value of this â€¦","Converts an <code>u128</code> to return an optional value of this type. â€¦","Converts an <code>u16</code> to return an optional value of this type. â€¦","Converts an <code>u32</code> to return an optional value of this type. â€¦","Converts an <code>u64</code> to return an optional value of this type. â€¦","Converts an <code>u8</code> to return an optional value of this type. â€¦","Converts a <code>usize</code> to return an optional value of this type. â€¦","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to â€¦","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to â€¦","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value â€¦","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot â€¦","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be â€¦","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot â€¦","Return Eulerâ€™s number.","Return <code>1.0 / Ï€</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / Ï€</code>.","Return <code>2.0 / sqrt(Ï€)</code>.","Return <code>Ï€ / 2.0</code>.","Return <code>Ï€ / 3.0</code>.","Return <code>Ï€ / 4.0</code>.","Return <code>Ï€ / 6.0</code>.","Return <code>Ï€ / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with â€¦","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedesâ€™ constant <code>Ï€</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>Ï„</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> â€¦","Computes the absolute value of <code>self</code>. Returns â€¦","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in â€¦","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in â€¦","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in â€¦","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>â€¦","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a â€¦","Returns the smallest integer greater than or equal to a â€¦","Returns the floating point category of the number. If only â€¦","Returns the floating point category of the number. If only â€¦","Returns a number composed of the magnitude of <code>self</code> and the â€¦","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the â€¦","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle â€¦","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as â€¦","Returns the mantissa, base 2 exponent, and sign as â€¦","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or â€¦","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, â€¦","Returns <code>true</code> if the number is neither zero, infinite, â€¦","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and â€¦","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and â€¦","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an â€¦","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can â€¦","Returns the largest finite value that this type can â€¦","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this â€¦","Returns the smallest positive, normalized value that this â€¦","Returns the smallest finite value that this type can â€¦","Returns the smallest finite value that this type can â€¦","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the â€¦","Returns the nearest integer to a number. Round half-way â€¦","Returns the nearest integer to a number. Round half-way â€¦","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, â€¦","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative â€¦","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>â€¦","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of â€¦","Returns the number of zeros in the binary representation â€¦","Convert an integer from big endian to the targetâ€™s â€¦","Convert an integer from little endian to the targetâ€™s â€¦","Returns the number of leading ones in the binary â€¦","Returns the number of leading zeros in the binary â€¦","Raises self to the power of <code>exp</code>, using exponentiation by â€¦","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the targetâ€™s endianness.","Convert <code>self</code> to little endian from the targetâ€™s â€¦","Returns the number of trailing ones in the binary â€¦","Returns the number of trailing zeros in the binary â€¦","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping â€¦","Performs division that returns <code>None</code> instead of panicking â€¦","Performs multiplication that returns <code>None</code> instead of â€¦","Performs negation that returns <code>None</code> if the result canâ€™t â€¦","Performs an integral remainder that returns <code>None</code> instead â€¦","Performs a left shift that returns <code>None</code> on shifts larger â€¦","Performs a right shift that returns <code>None</code> on shifts larger â€¦","Performs subtraction that returns <code>None</code> instead of wrapping â€¦","Adds two numbers, checking for overflow. If overflow â€¦","Divides two numbers, checking for underflow, overflow and â€¦","Multiplies two numbers, checking for underflow or â€¦","Negates a number, returning <code>None</code> for results that canâ€™t â€¦","Finds the remainder of dividing two numbers, checking for â€¦","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> â€¦","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> â€¦","Subtracts two numbers, checking for underflow. If â€¦","","","Performs euclid division that returns <code>None</code> instead of â€¦","Finds the euclid remainder of dividing two numbers, â€¦","Calculates Euclidean division, the matching method for â€¦","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, â€¦","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating â€¦","Returns a tuple of the product along with a boolean â€¦","Returns a tuple of the difference along with a boolean â€¦","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, â€¦","Performs addition that saturates at the numeric bounds â€¦","Performs multiplication that saturates at the numeric â€¦","Performs subtraction that saturates at the numeric bounds â€¦","Saturating addition operator. Returns a+b, saturating at â€¦","Saturating addition. Computes <code>self + other</code>, saturating at â€¦","Saturating multiplication. Computes <code>self * other</code>, â€¦","Saturating subtraction operator. Returns a-b, saturating â€¦","Saturating subtraction. Computes <code>self - other</code>, saturating â€¦","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, â€¦","Wrapping (modular) multiplication. Computes <code>self * other</code>, â€¦","Wrapping (modular) negation. Computes <code>-self</code>, wrapping â€¦","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, â€¦","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, â€¦","Wrapping (modular) subtraction. Computes <code>self - other</code>, â€¦","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an â€¦","Raises a value to the power of exp, using exponentiation â€¦","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have â€¦","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> â€¦","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in â€¦","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in â€¦","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in â€¦","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>â€¦","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a â€¦","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the â€¦","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle â€¦","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, â€¦","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an â€¦","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can â€¦","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this â€¦","Returns the smallest finite value that this type can â€¦","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way â€¦","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, â€¦","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can â€¦","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the â€¦","Returns true if the number is positive and false if the â€¦","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,39,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,39,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,40,41,40,42,0,0,0,0,43,0,11,44,44,44,44,44,44,44,44,44,44,44,44,44,44,13,13,13,13,13,13,13,13,13,13,13,13,13,13,45,45,45,45,45,45,45,45,45,45,0,0,0,45,45,45,45,45,45,45,45,45,46,47,46,46,46,46,46,46,46,46,46,46,47,47,46,46,46,46,47,46,46,46,46,46,47,46,47,46,47,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,46,46,46,46,46,46,47,47,46,46,47,47,46,47,46,46,47,46,47,46,47,46,46,46,47,46,47,46,47,46,47,46,46,46,46,46,46,47,46,47,46,46,47,0,0,33,34,0,33,33,34,0,34,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,36,51,52,53,54,55,0,0,56,56,57,57,0,58,58,0,0,59,59,60,0,0,0,61,62,63,0,0,0,0,64,65,66,64,67,0,0,0,0,0,0,68,69,70,71,72,73,74,0,0,0,74,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,38,0,38,38,38,0,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[],[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,29]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[32,31],[[],31],[[],33],[[]],[[]],[[]],[[],34],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[35,33,36]],26],[[12,[[0,[35,33,36]]]]]],[[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,37]]]]]]]]]]]]]]]]]],26],[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,37]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[38,38],[[]],[[38,38],38],[[]],[[],31],[[],31],[38,38],[[]]],"c":[],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized"],[8,"Div"],[8,"Add"],[4,"FpCategory"],[15,"bool"],[8,"PartialEq"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"poc":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"qux":{"doc":"","t":"OO","n":["qux1","qux_long"],"q":[[0,"qux"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
